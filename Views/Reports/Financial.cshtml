@model DFTRK.ViewModels.FinancialReportViewModel
@{
    ViewData["Title"] = "Financial Performance Report";
}

<div class="container-fluid mt-4">
    <h1 class="mb-4">Financial Performance Report</h1>
    
    <!-- Date Range Filter -->
    <div class="card mb-4">
        <div class="card-body">
            <form method="get" class="row g-3 align-items-end">
                <div class="col-md-4">
                    <label for="startDate" class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="startDate" name="startDate" value="@Model.StartDate.ToString("yyyy-MM-dd")">
                </div>
                <div class="col-md-4">
                    <label for="endDate" class="form-label">End Date</label>
                    <input type="date" class="form-control" id="endDate" name="endDate" value="@Model.EndDate.ToString("yyyy-MM-dd")">
                </div>
                <div class="col-md-4">
                    <button type="submit" class="btn btn-primary w-100">Apply Filters</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Financial Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Transaction Volume</h5>
                    <h2 class="display-6">$@Model.TotalTransactionVolume.ToString("N2")</h2>
                    <p class="card-text">Total value of all transactions</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Platform Fees</h5>
                    <h2 class="display-6">$@Model.PlatformFees.ToString("N2")</h2>
                    <p class="card-text">Revenue from 0.1% transaction fee</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Actual Revenue</h5>
                    <h2 class="display-6">$@Model.ActualRevenue.ToString("N2")</h2>
                    <p class="card-text">Amount actually collected</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-dark h-100">
                <div class="card-body">
                    <h5 class="card-title">Collection Rate</h5>
                    <h2 class="display-6">@Model.CollectionRate.ToString("N1")%</h2>
                    <p class="card-text">Percentage of total volume collected</p>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Monthly Trends Chart -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Monthly Transaction Volume</h5>
                </div>
                <div class="card-body">
                    <canvas id="monthlyTrendChart" height="300"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card h-100">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Monthly Platform Fees</h5>
                </div>
                <div class="card-body">
                    <canvas id="monthlyFeesChart" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Payment Method and Aging Analysis -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card h-100">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">Payment Method Distribution</h5>
                </div>
                <div class="card-body">
                    <canvas id="paymentMethodChart" height="300"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card h-100">
                <div class="card-header bg-warning text-dark">
                    <h5 class="mb-0">Accounts Receivable Aging</h5>
                </div>
                <div class="card-body">
                    <canvas id="agingChart" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Top Retailers Table -->
    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Top Retailers by Transaction Volume</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Retailer ID</th>
                            <th>Transaction Count</th>
                            <th>Transaction Volume</th>
                            <th>Platform Fees</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var retailer in Model.TopRetailersByVolume)
                        {
                            <tr>
                                <td>@retailer.RetailerId</td>
                                <td>@retailer.TransactionCount</td>
                                <td>$@retailer.TransactionVolume.ToString("N2")</td>
                                <td>$@retailer.PlatformFees.ToString("N2")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <!-- Top Wholesalers Table -->
    <div class="card mb-4">
        <div class="card-header bg-success text-white">
            <h5 class="mb-0">Top Wholesalers by Transaction Volume</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Wholesaler ID</th>
                            <th>Transaction Count</th>
                            <th>Transaction Volume</th>
                            <th>Platform Fees</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var wholesaler in Model.TopWholesalersByVolume)
                        {
                            <tr>
                                <td>@wholesaler.WholesalerId</td>
                                <td>@wholesaler.TransactionCount</td>
                                <td>$@wholesaler.TransactionVolume.ToString("N2")</td>
                                <td>$@wholesaler.PlatformFees.ToString("N2")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Monthly Trend Chart
        const monthlyTrendCtx = document.getElementById('monthlyTrendChart').getContext('2d');
        new Chart(monthlyTrendCtx, {
            type: 'bar',
            data: {
                labels: [@Html.Raw(string.Join(",", Model.MonthlyTrendChart.Select(c => $"'{c.Label}'")))],
                datasets: [{
                    label: 'Transaction Volume',
                    data: [@string.Join(",", Model.MonthlyTrendChart.Select(c => c.Value))],
                    backgroundColor: 'rgba(13, 110, 253, 0.7)',
                    borderColor: 'rgba(13, 110, 253, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toLocaleString();
                            }
                        }
                    }
                }
            }
        });
        
        // Monthly Fees Chart
        const monthlyFeesCtx = document.getElementById('monthlyFeesChart').getContext('2d');
        new Chart(monthlyFeesCtx, {
            type: 'bar',
            data: {
                labels: [@Html.Raw(string.Join(",", Model.MonthlyFeesChart.Select(c => $"'{c.Label}'")))],
                datasets: [{
                    label: 'Platform Fees',
                    data: [@string.Join(",", Model.MonthlyFeesChart.Select(c => c.Value))],
                    backgroundColor: 'rgba(25, 135, 84, 0.7)',
                    borderColor: 'rgba(25, 135, 84, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toLocaleString();
                            }
                        }
                    }
                }
            }
        });
        
        // Payment Method Chart
        const paymentMethodCtx = document.getElementById('paymentMethodChart').getContext('2d');
        new Chart(paymentMethodCtx, {
            type: 'pie',
            data: {
                labels: [@Html.Raw(string.Join(",", Model.PaymentMethodChart.Select(c => $"'{c.Label}'")))],
                datasets: [{
                    data: [@string.Join(",", Model.PaymentMethodChart.Select(c => c.Value))],
                    backgroundColor: [
                        'rgba(13, 110, 253, 0.7)',
                        'rgba(25, 135, 84, 0.7)',
                        'rgba(13, 202, 240, 0.7)',
                        'rgba(255, 193, 7, 0.7)',
                        'rgba(220, 53, 69, 0.7)'
                    ],
                    borderColor: [
                        'rgba(13, 110, 253, 1)',
                        'rgba(25, 135, 84, 1)',
                        'rgba(13, 202, 240, 1)',
                        'rgba(255, 193, 7, 1)',
                        'rgba(220, 53, 69, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                let label = context.label || '';
                                let value = context.raw || 0;
                                return label + ': $' + value.toLocaleString();
                            }
                        }
                    }
                }
            }
        });
        
        // Aging Chart
        const agingCtx = document.getElementById('agingChart').getContext('2d');
        new Chart(agingCtx, {
            type: 'bar',
            data: {
                labels: [@Html.Raw(string.Join(",", Model.AgingChart.Select(c => $"'{c.Label}'")))],
                datasets: [{
                    label: 'Outstanding Amount',
                    data: [@string.Join(",", Model.AgingChart.Select(c => c.Value))],
                    backgroundColor: 'rgba(255, 193, 7, 0.7)',
                    borderColor: 'rgba(255, 193, 7, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toLocaleString();
                            }
                        }
                    }
                }
            }
        });
    </script>
} 