@model DFTRK.ViewModels.SalesReportViewModel

@{
    ViewData["Title"] = "Sales Report";
}

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <div class="d-flex justify-content-between align-items-center">
                <h1>Sales Report</h1>
                <a asp-controller="Reports" asp-action="Index" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left me-2"></i>Back to Reports
                </a>
            </div>
            <p class="text-muted">Analyze sales performance across the platform</p>
        </div>
    </div>

    <!-- Enhanced Filters -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-funnel me-2"></i>Filter Options</h5>
                </div>
                <div class="card-body">
                    <form asp-action="Sales" method="get" class="row g-3">
                        <!-- Date Range -->
                        <div class="col-md-3">
                            <label class="form-label">Start Date</label>
                            <input type="date" name="startDate" class="form-control" value="@Model.StartDate.ToString("yyyy-MM-dd")" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">End Date</label>
                            <input type="date" name="endDate" class="form-control" value="@Model.EndDate.ToString("yyyy-MM-dd")" />
                        </div>
                        
                        <!-- Retailer Filter -->
                        <div class="col-md-2">
                            <label class="form-label">Retailer</label>
                            <select name="retailerId" class="form-select">
                                <option value="">All Retailers</option>
                                @foreach (var retailer in Model.Retailers)
                                {
                                                                    <option value="@retailer.Id" selected="@(Model.RetailerId == retailer.Id)">
                                    @(retailer.BusinessName ?? retailer.UserName)
                                </option>
                                }
                            </select>
                        </div>
                        
                        <!-- Wholesaler Filter -->
                        <div class="col-md-2">
                            <label class="form-label">Wholesaler</label>
                            <select name="wholesalerId" class="form-select">
                                <option value="">All Wholesalers</option>
                                @foreach (var wholesaler in Model.Wholesalers)
                                {
                                                                    <option value="@wholesaler.Id" selected="@(Model.WholesalerId == wholesaler.Id)">
                                    @(wholesaler.BusinessName ?? wholesaler.UserName)
                                </option>
                                }
                            </select>
                        </div>
                        
                        <!-- Status Filter -->
                        <div class="col-md-2">
                            <label class="form-label">Order Status</label>
                            <select name="status" class="form-select">
                                <option value="">All Statuses</option>
                                @foreach (var status in Enum.GetValues(typeof(DFTRK.Models.OrderStatus)))
                                {
                                    <option value="@status" selected="@(Model.StatusFilter == (DFTRK.Models.OrderStatus)status)">
                                        @status
                                    </option>
                                }
                            </select>
                        </div>
                        
                        <div class="col-12 text-end">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-search me-2"></i>Apply Filters
                            </button>
                            <a asp-action="Sales" class="btn btn-outline-secondary">
                                <i class="bi bi-x-circle me-2"></i>Clear Filters
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Key Metrics -->
    <div class="row mb-4">
        <!-- Order Metrics -->
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-cart-check me-2"></i>Order Metrics</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="card bg-light h-100">
                                <div class="card-body">
                                    <h5 class="card-title">Total Orders</h5>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h2 class="display-5">@Model.TotalOrders</h2>
                                        <i class="bi bi-cart-check fs-1 text-primary"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="card bg-light h-100">
                                <div class="card-body">
                                    <h5 class="card-title">Avg. Order Value</h5>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h2 class="display-5">$@(Model.TotalOrders > 0 ? (Model.TotalSales / Model.TotalOrders).ToString("N0") : "0")</h2>
                                        <i class="bi bi-calculator fs-1 text-info"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-3">
                        <div class="d-flex justify-content-between mb-1">
                            <span>Pending</span>
                            <span>@Model.PendingOrders</span>
                        </div>
                        <div class="progress mb-2" style="height: 8px;">
                            <div class="progress-bar bg-warning" style="width: @(Model.TotalOrders > 0 ? (Model.PendingOrders * 100 / Model.TotalOrders) : 0)%"></div>
                        </div>
                        
                        <div class="d-flex justify-content-between mb-1">
                            <span>Processing</span>
                            <span>@Model.ProcessingOrders</span>
                        </div>
                        <div class="progress mb-2" style="height: 8px;">
                            <div class="progress-bar bg-info" style="width: @(Model.TotalOrders > 0 ? (Model.ProcessingOrders * 100 / Model.TotalOrders) : 0)%"></div>
                        </div>
                        
                        <div class="d-flex justify-content-between mb-1">
                            <span>Shipped</span>
                            <span>@Model.ShippedOrders</span>
                        </div>
                        <div class="progress mb-2" style="height: 8px;">
                            <div class="progress-bar bg-primary" style="width: @(Model.TotalOrders > 0 ? (Model.ShippedOrders * 100 / Model.TotalOrders) : 0)%"></div>
                        </div>
                        
                        <div class="d-flex justify-content-between mb-1">
                            <span>Delivered</span>
                            <span>@Model.DeliveredOrders</span>
                        </div>
                        <div class="progress mb-2" style="height: 8px;">
                            <div class="progress-bar bg-primary" style="width: @(Model.TotalOrders > 0 ? (Model.DeliveredOrders * 100 / Model.TotalOrders) : 0)%"></div>
                        </div>
                        
                        <div class="d-flex justify-content-between mb-1">
                            <span>Completed</span>
                            <span>@Model.CompletedOrders</span>
                        </div>
                        <div class="progress mb-2" style="height: 8px;">
                            <div class="progress-bar bg-success" style="width: @(Model.TotalOrders > 0 ? (Model.CompletedOrders * 100 / Model.TotalOrders) : 0)%"></div>
                        </div>
                        
                        <div class="d-flex justify-content-between mb-1">
                            <span>Cancelled</span>
                            <span>@Model.CancelledOrders</span>
                        </div>
                        <div class="progress mb-2" style="height: 8px;">
                            <div class="progress-bar bg-danger" style="width: @(Model.TotalOrders > 0 ? (Model.CancelledOrders * 100 / Model.TotalOrders) : 0)%"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Financial Metrics -->
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0"><i class="bi bi-cash-stack me-2"></i>Financial Metrics</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="card bg-light h-100">
                                <div class="card-body">
                                    <h5 class="card-title">Total Sales Value</h5>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h2 class="display-5">$@Model.TotalSales.ToString("N0")</h2>
                                        <i class="bi bi-currency-dollar fs-1 text-success"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="card bg-light h-100">
                                <div class="card-body">
                                    <h5 class="card-title">Actual Revenue</h5>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h2 class="display-5">$@Model.ActualRevenue.ToString("N0")</h2>
                                        <i class="bi bi-cash-coin fs-1 text-success"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-3">
                        <div class="card border-info">
                            <div class="card-body">
                                <h5 class="card-title">Payment Status</h5>
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Total Sales Value</span>
                                    <span class="fw-bold">$@Model.TotalSales.ToString("N2")</span>
                                </div>
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Actual Revenue (Paid)</span>
                                    <span class="fw-bold text-success">$@Model.ActualRevenue.ToString("N2")</span>
                                </div>
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Outstanding Amount</span>
                                    <span class="fw-bold text-danger">$@Model.OutstandingAmount.ToString("N2")</span>
                                </div>
                                
                                <!-- Payment Progress Bar -->
                                <div class="mt-3">
                                    <div class="progress" style="height: 20px;">
                                        @{
                                            var paymentPercentage = Model.TotalSales > 0 ? (int)Math.Round((Model.ActualRevenue / Model.TotalSales) * 100) : 0;
                                        }
                                        <div class="progress-bar bg-success" role="progressbar" style="width: @paymentPercentage%;" 
                                            aria-valuenow="@paymentPercentage" aria-valuemin="0" aria-valuemax="100">
                                            @paymentPercentage%
                                        </div>
                                    </div>
                                    <div class="text-center mt-2">
                                        <small class="text-muted">@paymentPercentage% of total sales value has been collected</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Enhanced Data Visualizations -->
    <div class="row mb-4">
        <!-- Orders by Status Chart -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-pie-chart me-2"></i>Orders by Status</h5>
                </div>
                <div class="card-body">
                    @if (Model.OrdersByStatusChart.Any())
                    {
                        <div class="row">
                            @foreach (var dataPoint in Model.OrdersByStatusChart)
                            {
                                <div class="col-md-6 mb-3">
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <span>@dataPoint.Label</span>
                                        <span class="text-muted">@dataPoint.Count orders</span>
                                    </div>
                                    <div class="progress" style="height: 20px;">
                                        @{
                                            var statusColor = dataPoint.Label switch
                                            {
                                                "Completed" => "bg-success",
                                                "Pending" => "bg-warning",
                                                "Processing" => "bg-info",
                                                "Shipped" => "bg-primary",
                                                "Delivered" => "bg-success",
                                                "Cancelled" => "bg-danger",
                                                _ => "bg-secondary"
                                            };
                                            var percentage = Model.TotalSales > 0 ? (int)Math.Min(100, Math.Round((dataPoint.Value / Model.TotalSales) * 100)) : 0;
                                        }
                                        <div class="progress-bar @statusColor" role="progressbar" style="width: @percentage%;" 
                                             aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100">
                                            $@dataPoint.Value.ToString("N0")
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <p class="mb-0 text-muted">No data available for the selected period.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <!-- Daily Sales Chart -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0"><i class="bi bi-graph-up me-2"></i>Daily Sales Trend</h5>
                </div>
                <div class="card-body">
                    @if (Model.DailySalesChart.Any())
                    {
                        <div class="chart-container mt-3" style="position: relative; height:300px;">
                            <canvas id="dailySalesChart"></canvas>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <p class="mb-0 text-muted">No data available for the selected period.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    
    <!-- Top Performers -->
    <div class="row mb-4">
        <!-- Top Retailers -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0"><i class="bi bi-shop me-2"></i>Top Retailers</h5>
                </div>
                <div class="card-body">
                    @if (Model.TopRetailers.Any())
                    {
                        <div class="table-responsive mb-3">
                            <table class="table table-sm table-hover">
                                <thead>
                                    <tr>
                                        <th>Retailer</th>
                                        <th class="text-center">Orders</th>
                                        <th class="text-end">Revenue</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var retailer in Model.TopRetailers.Take(5))
                                    {
                                        <tr>
                                            <td>@retailer.RetailerName</td>
                                            <td class="text-center">@retailer.OrderCount</td>
                                            <td class="text-end">$@retailer.TotalRevenue.ToString("N2")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        <div class="chart-container mt-3" style="position: relative; height:300px;">
                            <canvas id="salesByRetailerChart"></canvas>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <p class="mb-0 text-muted">No data available for the selected period.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <!-- Top Wholesalers -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-building me-2"></i>Top Wholesalers</h5>
                </div>
                <div class="card-body">
                    @if (Model.TopWholesalers.Any())
                    {
                        <div class="table-responsive mb-3">
                            <table class="table table-sm table-hover">
                                <thead>
                                    <tr>
                                        <th>Wholesaler</th>
                                        <th class="text-center">Orders</th>
                                        <th class="text-end">Sales</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var wholesaler in Model.TopWholesalers.Take(5))
                                    {
                                        <tr>
                                            <td>@wholesaler.WholesalerName</td>
                                            <td class="text-center">@wholesaler.OrderCount</td>
                                            <td class="text-end">$@wholesaler.TotalSpent.ToString("N2")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        <div class="chart-container mt-3" style="position: relative; height:300px;">
                            <canvas id="salesByWholesalerChart"></canvas>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <p class="mb-0 text-muted">No data available for the selected period.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    
    <!-- Top Products -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-warning text-dark">
                    <h5 class="mb-0"><i class="bi bi-box-seam me-2"></i>Top Products</h5>
                </div>
                <div class="card-body">
                    @if (Model.TopProducts.Any())
                    {
                        <div class="row">
                            <div class="col-md-7">
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>Product</th>
                                                <th class="text-center">Quantity Sold</th>
                                                <th class="text-end">Revenue</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var product in Model.TopProducts)
                                            {
                                                <tr>
                                                    <td>@product.ProductName</td>
                                                    <td class="text-center">@product.QuantitySold</td>
                                                    <td class="text-end">$@product.TotalRevenue.ToString("N2")</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <div class="col-md-5">
                                <div class="chart-container" style="position: relative; height:300px;">
                                    <canvas id="productChart"></canvas>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <p class="mb-0 text-muted">No data available for the selected period.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Orders Table -->
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center bg-dark text-white">
                    <h5 class="mb-0"><i class="bi bi-table me-2"></i>Orders in Selected Period</h5>
                    <button class="btn btn-sm btn-outline-light" type="button" id="exportOrdersBtn">
                        <i class="bi bi-download me-2"></i>Export to CSV
                    </button>
                </div>
                <div class="card-body p-0">
                    @if (Model.Orders.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0" id="ordersTable">
                                <thead class="table-light">
                                    <tr>
                                        <th>Order #</th>
                                        <th>Date</th>
                                        <th>Retailer</th>
                                        <th>Wholesaler</th>
                                        <th>Total</th>
                                        <th>Paid</th>
                                        <th>Outstanding</th>
                                        <th>Order Status</th>
                                        <th>Payment Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var order in Model.Orders)
                                    {
                                        var amountPaid = order.Transaction?.AmountPaid ?? 0;
                                        var outstandingAmount = order.TotalAmount - amountPaid;
                                        var paymentStatus = order.Transaction?.Status ?? TransactionStatus.Pending;
                                        
                                        <tr>
                                            <td><a asp-controller="Orders" asp-action="Details" asp-route-id="@order.Id">#@order.Id</a></td>
                                            <td>@order.OrderDate.ToShortDateString()</td>
                                            <td>@order.Retailer?.BusinessName</td>
                                            <td>@order.Wholesaler?.BusinessName</td>
                                            <td>$@order.TotalAmount.ToString("F2")</td>
                                            <td>$@amountPaid.ToString("F2")</td>
                                            <td>$@outstandingAmount.ToString("F2")</td>
                                            <td>
                                                @switch (order.Status)
                                                {
                                                    case DFTRK.Models.OrderStatus.Pending:
                                                        <span class="badge bg-warning text-dark">Pending</span>
                                                        break;
                                                    case DFTRK.Models.OrderStatus.Processing:
                                                        <span class="badge bg-info">Processing</span>
                                                        break;
                                                    case DFTRK.Models.OrderStatus.Shipped:
                                                        <span class="badge bg-primary">Shipped</span>
                                                        break;
                                                    case DFTRK.Models.OrderStatus.Delivered:
                                                        <span class="badge bg-success">Delivered</span>
                                                        break;
                                                    case DFTRK.Models.OrderStatus.Completed:
                                                        <span class="badge bg-success">Completed</span>
                                                        break;
                                                    case DFTRK.Models.OrderStatus.Cancelled:
                                                        <span class="badge bg-danger">Cancelled</span>
                                                        break;
                                                    default:
                                                        <span class="badge bg-secondary">@order.Status</span>
                                                        break;
                                                }
                                            </td>
                                            <td>
                                                @switch (paymentStatus)
                                                {
                                                    case TransactionStatus.Completed:
                                                        <span class="badge bg-success">Paid</span>
                                                        break;
                                                    case TransactionStatus.PartiallyPaid:
                                                        <span class="badge bg-info">Partially Paid</span>
                                                        break;
                                                    case TransactionStatus.Pending:
                                                        <span class="badge bg-warning text-dark">Pending</span>
                                                        break;
                                                    default:
                                                        <span class="badge bg-secondary">@paymentStatus</span>
                                                        break;
                                                }
                                            </td>
                                            <td>
                                                <a asp-controller="Orders" asp-action="Details" asp-route-id="@order.Id" class="btn btn-sm btn-outline-primary">
                                                    <i class="bi bi-eye"></i> Details
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="p-4 text-center">
                            <p class="mb-0 text-muted">No orders found for the selected period.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <script>
        // Daily Sales Chart
        const dailySalesCtx = document.getElementById('dailySalesChart').getContext('2d');
        new Chart(dailySalesCtx, {
            type: 'line',
            data: {
                labels: [@Html.Raw(string.Join(",", Model.DailySalesChart.Select(c => $"'{c.Label}'")))],
                datasets: [
                    {
                        label: 'Order Value',
                        data: [@string.Join(",", Model.DailySalesChart.Select(c => c.Value))],
                        backgroundColor: 'rgba(13, 110, 253, 0.1)',
                        borderColor: 'rgba(13, 110, 253, 1)',
                        borderWidth: 2,
                        tension: 0.3,
                        fill: true,
                        order: 1
                    },
                    {
                        label: 'Amount Paid',
                        data: [@string.Join(",", Model.DailySalesChart.Select(c => c.SecondaryValue))],
                        backgroundColor: 'rgba(25, 135, 84, 0.1)',
                        borderColor: 'rgba(25, 135, 84, 1)',
                        borderWidth: 2,
                        tension: 0.3,
                        fill: true,
                        order: 2
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top',
                        labels: {
                            usePointStyle: true,
                            padding: 20
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                let label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                label += '$' + context.raw.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});
                                return label;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        grid: {
                            display: false
                        }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toLocaleString();
                            }
                        }
                    }
                }
            }
        });
        
        // Retailer Chart
        const salesByRetailerCtx = document.getElementById('salesByRetailerChart').getContext('2d');
        new Chart(salesByRetailerCtx, {
            type: 'bar',
            data: {
                labels: [@Html.Raw(string.Join(",", Model.SalesByRetailerChart.Select(c => $"'{c.Label}'")))],
                datasets: [
                    {
                        label: 'Order Value',
                        data: [@string.Join(",", Model.SalesByRetailerChart.Select(c => c.Value))],
                        backgroundColor: 'rgba(13, 110, 253, 0.7)',
                        borderColor: 'rgba(13, 110, 253, 1)',
                        borderWidth: 1,
                        barPercentage: 0.7,
                        categoryPercentage: 0.8
                    },
                    {
                        label: 'Amount Paid',
                        data: [@string.Join(",", Model.SalesByRetailerChart.Select(c => c.SecondaryValue))],
                        backgroundColor: 'rgba(25, 135, 84, 0.7)',
                        borderColor: 'rgba(25, 135, 84, 1)',
                        borderWidth: 1,
                        barPercentage: 0.7,
                        categoryPercentage: 0.8
                    }
                ]
            },
            options: {
                indexAxis: 'y',
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top',
                        labels: {
                            usePointStyle: true,
                            padding: 20
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                let label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                label += '$' + context.raw.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});
                                return label;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toLocaleString();
                            }
                        },
                        stacked: false
                    },
                    y: {
                        grid: {
                            display: false
                        },
                        stacked: false
                    }
                }
            }
        });
        
        // Wholesaler Chart
        const salesByWholesalerCtx = document.getElementById('salesByWholesalerChart').getContext('2d');
        new Chart(salesByWholesalerCtx, {
            type: 'bar',
            data: {
                labels: [@Html.Raw(string.Join(",", Model.SalesByWholesalerChart.Select(c => $"'{c.Label}'")))],
                datasets: [
                    {
                        label: 'Order Value',
                        data: [@string.Join(",", Model.SalesByWholesalerChart.Select(c => c.Value))],
                        backgroundColor: 'rgba(13, 110, 253, 0.7)',
                        borderColor: 'rgba(13, 110, 253, 1)',
                        borderWidth: 1,
                        barPercentage: 0.7,
                        categoryPercentage: 0.8
                    },
                    {
                        label: 'Amount Paid',
                        data: [@string.Join(",", Model.SalesByWholesalerChart.Select(c => c.SecondaryValue))],
                        backgroundColor: 'rgba(25, 135, 84, 0.7)',
                        borderColor: 'rgba(25, 135, 84, 1)',
                        borderWidth: 1,
                        barPercentage: 0.7,
                        categoryPercentage: 0.8
                    }
                ]
            },
            options: {
                indexAxis: 'y',
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top',
                        labels: {
                            usePointStyle: true,
                            padding: 20
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                let label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                label += '$' + context.raw.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});
                                return label;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toLocaleString();
                            }
                        },
                        stacked: false
                    },
                    y: {
                        grid: {
                            display: false
                        },
                        stacked: false
                    }
                }
            }
        });
        
        // Product Chart
        const productData = @Html.Raw(Json.Serialize(Model.TopProducts));
        if (productData && productData.length > 0) {
            const productCtx = document.getElementById('productChart').getContext('2d');
            new Chart(productCtx, {
                type: 'doughnut',
                data: {
                    labels: productData.map(p => p.productName),
                    datasets: [{
                        data: productData.map(p => p.totalRevenue),
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.7)',
                            'rgba(54, 162, 235, 0.7)',
                            'rgba(255, 206, 86, 0.7)',
                            'rgba(75, 192, 192, 0.7)',
                            'rgba(153, 102, 255, 0.7)',
                            'rgba(255, 159, 64, 0.7)',
                            'rgba(199, 199, 199, 0.7)',
                            'rgba(83, 102, 255, 0.7)',
                            'rgba(40, 159, 64, 0.7)',
                            'rgba(210, 199, 199, 0.7)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)',
                            'rgba(199, 199, 199, 1)',
                            'rgba(83, 102, 255, 1)',
                            'rgba(40, 159, 64, 1)',
                            'rgba(210, 199, 199, 1)'
                        ],
                        borderWidth: 1,
                        hoverOffset: 15,
                        borderRadius: 3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '60%',
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                boxWidth: 12,
                                padding: 15,
                                font: {
                                    size: 11
                                },
                                generateLabels: function(chart) {
                                    const data = chart.data;
                                    if (data.labels.length && data.datasets.length) {
                                        return data.labels.map(function(label, i) {
                                            const meta = chart.getDatasetMeta(0);
                                            const style = meta.controller.getStyle(i);
                                            const value = data.datasets[0].data[i];
                                            return {
                                                text: `${label}: $${value.toLocaleString()}`,
                                                fillStyle: style.backgroundColor,
                                                strokeStyle: style.borderColor,
                                                lineWidth: style.borderWidth,
                                                hidden: isNaN(value) || meta.data[i].hidden,
                                                index: i
                                            };
                                        });
                                    }
                                    return [];
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw;
                                    const total = context.dataset.data.reduce((acc, data) => acc + data, 0);
                                    const percentage = Math.round((value / total) * 100);
                                    return `${label}: $${value.toLocaleString()} (${percentage}%)`;
                                }
                            }
                        }
                    },
                    animation: {
                        animateScale: true,
                        animateRotate: true
                    }
                }
            });
        }
        
        // Export orders to CSV
        document.getElementById('exportOrdersBtn').addEventListener('click', function() {
            const table = document.getElementById('ordersTable');
            let csv = [];
            const rows = table.querySelectorAll('tr');
            
            for (let i = 0; i < rows.length; i++) {
                const row = [], cols = rows[i].querySelectorAll('td, th');
                
                for (let j = 0; j < cols.length; j++) {
                    // Get the text content and clean it
                    let data = cols[j].textContent.replace(/(\r\n|\n|\r)/gm, '').trim();
                    
                    // Quote fields with commas
                    if (data.includes(',')) {
                        data = `"${data}"`;
                    }
                    
                    row.push(data);
                }
                
                csv.push(row.join(','));
            }
            
            // Download CSV file
            const csvContent = 'data:text/csv;charset=utf-8,' + csv.join('\n');
            const encodedUri = encodeURI(csvContent);
            const link = document.createElement('a');
            link.setAttribute('href', encodedUri);
            link.setAttribute('download', 'orders_report.csv');
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        });
    </script>
} 